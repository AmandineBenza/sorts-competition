	@Override
	public void display() {
		StringBuilder sb = new StringBuilder();
		sb.append("[");
		
		for(int i = 0; i < content.length; ++i){
			sb.append(content[i]);
			sb.append(",");
		}
		
		sb.append(content[content.length - 1]);
	}
	
	
	@Override
	public IData process(IData data) {

		int size = data.getLength();

		for(int i = 1; i < size; ++i) {
			int key = data.get(i);
			int j = i - 1;

			while(j >= 0 && data.get(j) > key) {
				
				data.set(j + 1, data.get(j));
				j = j - 1;
			}
			
			data.set(j + 1, key);
		}
		
		return data;

	}
	
	
	@Override
	public IData process(IData data) {
		int size = data.getLength();
		
		for(int i = 2; i < size; ++i) {
			int x = data.get(i);
			int j = i;
			
			while(j > 1 && data.get(j - 1) > x) {
				data.set(j, data.get(j - 1));
				j = j - 1;
			}
			
			data.set(j, x);
		}
		
		return data;	
	} 
	
	public static void main(String[] args){
		randomScenario(10, -100, 100);
		Utils.println("");
		randomScenario(10, -100000, 100000);
		Utils.println("");
		
		sortedScenario(10, -100, 100);
		Utils.println("");
		sortedScenario(10, -100000, 100000);
		Utils.println("");
		
		reversedScenario(10, -100, 100);
		Utils.println("");
		reversedScenario(10, -100000, 100000);
		Utils.println("");
	
		flatScenario(10, 1000);
		Utils.println("");
		flatScenario(10, 1000);
		Utils.println("");
	}
	
	private static void randomScenario(int nb, int min, int max){
		Utils.println(">> Start of random scenario with:");
		Utils.println(">> Elements: " + nb + ", min value: " + min + ", max value: " + max + ".");
		
		IData dataset = Generator.getInstance().randomGeneration(nb, min, max);
		processScenario(InsertionSort.getInstance(), dataset, EnumTimeGranularity.MICROSECONDS, "Insertion sort");
		processScenario(MergeSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Merge sort");
		processScenario(QuickSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Quick sort");
		processScenario(HeapSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Heap sort");
		processScenario(JavaSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Java sort");
		
		Utils.println(">> End of random scenario.");
	}
	
	private static void sortedScenario(int nb, int min, int max){
		Utils.println(">> Start of sorted scenario with:");
		Utils.println(">> Elements: " + nb + ", min value: " + min + ", max value: " + max + ".");
		
		IData dataset = Generator.getInstance().sortedGeneration(nb, min, max);
		processScenario(InsertionSort.getInstance(), dataset, EnumTimeGranularity.MICROSECONDS, "Insertion sort");
		processScenario(MergeSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Merge sort");
		processScenario(QuickSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Quick sort");
		processScenario(HeapSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Heap sort");
		processScenario(JavaSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Java sort");
		
		Utils.println(">> End of sorted scenario.");
	}
	
	private static void reversedScenario(int nb, int min, int max){
		Utils.println(">> Start of reversed scenario with:");
		Utils.println(">> Elements :" + nb + ", min value: " + min + ", max value: " + max + ".");
		
		IData dataset = Generator.getInstance().reversedGeneration(nb, min, max);
		processScenario(InsertionSort.getInstance(), dataset, EnumTimeGranularity.MICROSECONDS, "Insertion sort");
		processScenario(MergeSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Merge sort");
		processScenario(QuickSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Quick sort");
		processScenario(HeapSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Heap sort");
		processScenario(JavaSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Java sort");
		
		Utils.println(">> End of reversed scenario.");
	}
	
	private static void flatScenario(int nb, int value){
		Utils.println(">> Start of flat scenario with:");
		Utils.println(">> Elements :" + nb + ", value: " + value + ".");
		
		IData dataset = Generator.getInstance().flatGeneration(nb, value);
		processScenario(InsertionSort.getInstance(), dataset, EnumTimeGranularity.MICROSECONDS, "Insertion sort");
		processScenario(MergeSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Merge sort");
		processScenario(QuickSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Quick sort");
		processScenario(HeapSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Heap sort");
		processScenario(JavaSort.getInstance(), dataset.clone(), EnumTimeGranularity.MICROSECONDS, "Java sort");
		
		Utils.println(">> End of flat scenario.");
	}
	
	private static void processScenario(ISort algo, IData dataset, EnumTimeGranularity granularity, String title){
		Time.start();
		algo.process(dataset);
		Time.end();
		Time.display(title, granularity);
		dataset.display();
	}

	/////////


		@Override
	public void execute(EnumTimeGranularity timeGranularity) {
		output.append("---------");
		output.append(title);
		output.append("\n");
		datas.forEach(data -> process(data));
		output.append("---------");
	}
	
	private void process(IData data) {
		Time.start();
		algo.process(dataset);
		Time.end();
		Time.display(title, granularity);
		dataset.display();
	}
	


					// executionResults.put(entry, executionResults.get(entry) + (System.nanoTime() - start));



						private void processWithDetailedMode(IScenarioEntry entry, EnumTimeGranularity timeGranularity) {
		ISort sortAlgo = entry.getSortAlgorithm();
		IData data = entry.getData().clone();
		String title = entry.getTitle();
		
		output.append("--> ");
		output.append(title);
		output.append("\n");
		
		long start = System.nanoTime();
		sortAlgo.process(data);
		long computedTime = System.nanoTime() - start;
		
		chart.addEntry(sortAlgo.getTitle(), Utils.log2(data.getLength()),
				Utils.log2(computedTime));
		output.append(data.toString());
		output.append("\n");
		output.append(computedTime);
		output.append("\n");
	}

	//

		private void executeWithTimeOnlyMode(EnumTimeGranularity timeGranularity, int times){
		output.append("Time granularity: ");
		output.append(EnumTimeGranularity.getString(timeGranularity));
		output.append("\n\n[");
		
		for(int i = 0; i < entries.size() - 1; ++i){
			IScenarioEntry entry = entries.get(i);
			ISort sortAlgo = entry.getSortAlgorithm();
			IData data = entry.getData().clone();
			
			long start = System.nanoTime();
			sortAlgo.process(data);
			long computedTime = System.nanoTime() - start;
			
			// here constructs step by step the chart
			chart.addEntry(sortAlgo.getTitle(), Utils.log2(data.getLength()), Utils.log2(computedTime));
			output.append(computedTime);
			output.append(",");
		}
		
		IScenarioEntry entry = entries.get(entries.size() - 1);
		ISort sortAlgo = entry.getSortAlgorithm();
		IData data = entry.getData().clone();
		
		long start = System.nanoTime();
		sortAlgo.process(data);
		long computedTime = System.nanoTime() - start;
		
		output.append(computedTime);
		output.append("]");
	}