	@Override
	public void display() {
		StringBuilder sb = new StringBuilder();
		sb.append("[");
		
		for(int i = 0; i < content.length; ++i){
			sb.append(content[i]);
			sb.append(",");
		}
		
		sb.append(content[content.length - 1]);
	}
	
	
	@Override
	public IData process(IData data) {

		int size = data.getLength();

		for(int i = 1; i < size; ++i) {
			int key = data.get(i);
			int j = i - 1;

			while(j >= 0 && data.get(j) > key) {
				
				data.set(j + 1, data.get(j));
				j = j - 1;
			}
			
			data.set(j + 1, key);
		}
		
		return data;

	}
	
	
	@Override
	public IData process(IData data) {
		int size = data.getLength();
		
		for(int i = 2; i < size; ++i) {
			int x = data.get(i);
			int j = i;
			
			while(j > 1 && data.get(j - 1) > x) {
				data.set(j, data.get(j - 1));
				j = j - 1;
			}
			
			data.set(j, x);
		}
		
		return data;	
	} 
	
	
	package com.lama.sc.execution;

import com.lama.sc.utils.time.EnumTimeGranularity;

public final class ScenarioConfig {
	
	private EnumTimeGranularity timeGranularity;
	private EnumScenarioOutputMode outputMode;
	private int sizeStart;
	private int stepMul; 
	private int highBound;
	
	private ScenarioConfig(EnumTimeGranularity timeGranularity, EnumScenarioOutputMode outputMode, int sizeStart,
			int stepMul, int highBound) {
		this.timeGranularity = timeGranularity;
		this.outputMode = outputMode;
		this.sizeStart = sizeStart;
		this.stepMul = stepMul;
		this.highBound = highBound;
	}
	
	public static ScenarioConfig of(EnumTimeGranularity timeGranularity, EnumScenarioOutputMode outputMode, int sizeStart,
			int stepMul, int highBound){
		return new ScenarioConfig(timeGranularity, outputMode, sizeStart, stepMul, highBound);
	}

	public EnumTimeGranularity getTimeGranularity() {
		return timeGranularity;
	}

	public void setTimeGranularity(EnumTimeGranularity timeGranularity) {
		this.timeGranularity = timeGranularity;
	}

	public EnumScenarioOutputMode getOutputMode() {
		return outputMode;
	}

	public void setOutputMode(EnumScenarioOutputMode outputMode) {
		this.outputMode = outputMode;
	}

	public int getSizeStart() {
		return sizeStart;
	}

	public void setSizeStart(int sizeStart) {
		this.sizeStart = sizeStart;
	}

	public int getStepMul() {
		return stepMul;
	}

	public void setStepMul(int stepMul) {
		this.stepMul = stepMul;
	}

	public int getHighBound() {
		return highBound;
	}

	public void setHighBound(int highBound) {
		this.highBound = highBound;
	}
	

}


package com.lama.sc.utils;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class Chart extends JFrame {

	private static final long serialVersionUID = 1L;
	
	private Map<String, XYSeries> data;
	private String title;
	
	private int width;
	private int height;
	
	public Chart(String applicationTitle, String chartTitle, int width, int height) {
		super(applicationTitle);
		this.title = chartTitle;
		this.data = new HashMap<>();
	}
	
	public Chart build(){
		// based on the dataset we create the chart
		JFreeChart pieChart = ChartFactory.createXYLineChart(title, "Data Size", "Time", getDataset(),
				PlotOrientation.VERTICAL, true, true, false);
		// Adding chart into a chart panel
		ChartPanel chartPanel = new ChartPanel(pieChart);
		// settind default size
		chartPanel.setPreferredSize(new java.awt.Dimension(width, height));
		// add to contentPane
		setContentPane(chartPanel);
		return this;
	}
	
	public void createSerie(String title){
		
	}
	
	private XYDataset getDataset(){
		final XYSeriesCollection dataset = new XYSeriesCollection();
		Iterator<Entry<String, XYSeries>> it = data.entrySet().iterator();
		
		while(it.hasNext()){
			Entry<String, XYSeries> entry = it.next();
			
		}
	}

	private XYDataset createDataset() {
		final XYSeries firefox = new XYSeries("Firefox");
		firefox.add(1.0, 1.0);
		firefox.add(2.0, 3.0);
		firefox.add(3.0, 4.0);

		final XYSeries chrome = new XYSeries("Chrome");
		chrome.add(1.0, 4.0);
		chrome.add(2.0, 6.0);
		chrome.add(3.0, 5.0);

		final XYSeries iexplorer = new XYSeries("InternetExplorer");
		iexplorer.add(3.0, 4.0);
		iexplorer.add(4.0, 5.0);
		iexplorer.add(5.0, 4.0);

		final XYSeriesCollection dataset = new XYSeriesCollection();
		dataset.addSeries(firefox);
		dataset.addSeries(chrome);
		dataset.addSeries(iexplorer);

		return dataset;
	}

}



package com.lama.sc.utils;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class Chart extends JFrame implements IChart{

	private static final long serialVersionUID = 463815431520813632L;
	
	private Map<String, XYSeries> data; 
	private String title;
	
	private int width;
	private int height;
	
	public Chart(String applicationTitle, String chartTitle, int width, int height) {
		super(applicationTitle);
		this.title = chartTitle;
		this.data = new HashMap<>();
	}
	
	@Override
	public IChart build(){
		// based on the dataset we create the chart
		JFreeChart pieChart = ChartFactory.createXYLineChart(title, "Data Size", "Time", getDataset(),
				PlotOrientation.VERTICAL, true, true, false);
		// Adding chart into a chart panel
		ChartPanel chartPanel = new ChartPanel(pieChart);
		// settind default size
		chartPanel.setPreferredSize(new java.awt.Dimension(width, height));
		// add to contentPane
		setContentPane(chartPanel);
		return this;
	}
	
	private XYDataset getDataset(){
		XYSeriesCollection dataset = new XYSeriesCollection();
		data.values().forEach(serie -> dataset.addSeries(serie));
		return dataset;
	}
	
	public IChart addEntry(String serieTitle, int dataSize, int time){
		if(data.containsKey(serieTitle)){
			data.get(serieTitle).add(dataSize, time);
		} else {
			XYSeries newSerie = new XYSeries(serieTitle);
			newSerie.add(dataSize, time);
			data.put(serieTitle, newSerie);
		}
		
		return this;
	}
	
}
//		  Chart chart = new Chart("Browser Usage Statistics", "Which Browser are you using?");
//	      chart.pack();
//	      chart.setVisible(true);

	
	
	
	
	
	//
	
	
	
	package com.lama.sc.utils.rendering;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class Chart extends JFrame implements IChart{

	private static final long serialVersionUID = 463815431520813632L;
	
	private Map<String, XYSeries> data; 
	private String title;
	
	private int width;
	private int height;
	
	public Chart(String applicationTitle, String chartTitle, int width, int height) {
		super(applicationTitle);
		this.title = chartTitle;
		this.data = new HashMap<>();
		
		JFreeChart pieChart = ChartFactory.createXYLineChart(title, applicationTitle, chartTitle, getDataset(),
				PlotOrientation.VERTICAL, true, true, false);
		// Adding chart into a chart panel
		ChartPanel chartPanel = new ChartPanel(pieChart);
		// settind default size
		chartPanel.setPreferredSize(new java.awt.Dimension(width, height));
		// add to contentPane
		setContentPane(chartPanel);
	}
	
	@Override
	public IChart build(){
		// based on the dataset we create the chart
		JFreeChart pieChart = ChartFactory.createXYLineChart(title, "Data Size", "Time", getDataset(),
				PlotOrientation.VERTICAL, true, true, false);
		// Adding chart into a chart panel
		ChartPanel chartPanel = new ChartPanel(pieChart);
		// settind default size
		chartPanel.setPreferredSize(new java.awt.Dimension(width, height));
		// add to contentPane
		setContentPane(chartPanel);
		return this;
	}
	
	@Override
	public void launch(){
		pack();
		requestFocus();
		setVisible(true);
	}
	
	private XYDataset getDataset(){
		XYSeriesCollection dataset = new XYSeriesCollection();
		data.values().forEach(serie -> dataset.addSeries(serie));
		return dataset;
	}
	
	public IChart addEntry(String serieTitle, int dataSize, int time){
		if(data.containsKey(serieTitle)){
			data.get(serieTitle).add(dataSize, time);
		} else {
			XYSeries newSerie = new XYSeries(serieTitle);
			newSerie.add(dataSize, time);
			data.put(serieTitle, newSerie);
		}
		
		return this;
	}
	
	
	// 
	
	package com.lama.sc.utils.rendering;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class Chart extends JFrame implements IChart {

	private static final long serialVersionUID = 1L;
	
	private Map<String, XYSeries> data; 
	private String title;
	
	private int width;
	private int height;
	
	private Chart(String applicationTitle, String chartTitle, int width, int height, XYSeriesCollection collection) {
		super(applicationTitle);
		this.title = chartTitle;
		this.data = new HashMap<>();
		this.width = width;
		this.height = height;
		
		JFreeChart pieChart = ChartFactory.createXYLineChart(title, applicationTitle, chartTitle, collection,
				PlotOrientation.VERTICAL, true, true, false);
		// Adding chart into a chart panel
		ChartPanel chartPanel = new ChartPanel(pieChart);
		// settind default size
		chartPanel.setPreferredSize(new java.awt.Dimension(width, height));
		// add to contentPane
		this.setContentPane(chartPanel);
	}
	
	@Override
	public IChart launch(){
		this.pack();
		this.requestFocus();
		this.setVisible(true);
		return this;
	}
	
	public static IChart from(ChartConfig config){
		
	}
	
}
	
	
}
	